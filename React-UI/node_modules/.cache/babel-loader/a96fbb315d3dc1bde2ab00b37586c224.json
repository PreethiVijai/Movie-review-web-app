{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrut\\\\webapp\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from \"react\";\nimport \"./counter.css\";\nimport logo from \"./cine.png\";\nimport search from \"./searchicon.jpg\";\nimport Autosuggest from \"react-autosuggest\";\nimport axios from \"axios\";\nimport { debounce } from \"throttle-debounce\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      suggestions: [],\n      cacheAPISugestions: [],\n      isOpen: false\n    };\n    this.SUGGEST_URL = \"http://localhost:8080/suggest\";\n\n    this.renderSuggestion = suggestion => {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, suggestion.name);\n    };\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(this.state.cacheAPISugestions, value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestionValue\n    }) => {\n      var filterRes = this.state.suggestions;\n      filterRes = filterRes.filter(item => item.name == suggestionValue);\n\n      if (filterRes != 0) {\n        this.setState({\n          filterResults: filterRes\n        });\n      } else {\n        this.setState({\n          filterResults: this.state.suggestions\n        });\n      }\n    };\n\n    this.getSuggestions = (moviesNames, searchValue) => {\n      const inputValue = searchValue.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      if (inputLength === 0) return [];else {\n        var i;\n        return moviesNames.filter(s => s.name.toLowerCase().includes(inputValue) || s.year.toLowerCase().includes(inputValue));\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.onSuggestionsFetchRequested = debounce(500, this.onSuggestionsFetchRequested);\n  }\n\n  componentDidMount() {\n    axios.get(this.SUGGEST_URL, {}).then(res => {\n      this.setState({\n        cacheAPISugestions: res.data\n      });\n    });\n  }\n\n  render() {\n    let videoid = \"vi2308751129\";\n    let link = `https://www.imdb.com/videoembed/${videoid}`;\n    const value = this.state.value;\n    const suggestions = this.state.suggestions;\n    const inputProps = {\n      placeholder: \" Enter movie name or year\",\n      value,\n      onChange: this.onChange\n    };\n\n    const renderInputComponent = inputProps => React.createElement(\"div\", {\n      className: \"inputContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"icon\",\n      src: \"https://img.icons8.com/ios-filled/50/000000/search.png\",\n      width: \"20px\",\n      height: \"20px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, inputProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n\n    return React.createElement(\"div\", {\n      id: \"page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"logoheader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: logo,\n      width: \"50\",\n      height: \"50\",\n      backgroundColor: \"transparent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"CINEPHILE\")), React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: suggestion => suggestion.name,\n      renderSuggestion: this.renderSuggestion,\n      onSuggestionSelected: this.onSuggestionSelected,\n      inputProps: inputProps,\n      renderInputComponent: renderInputComponent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"all_details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"moviereview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"trailer\",\n      style: {\n        backgroundColor: \"#cde\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"iframe\", {\n      src: link,\n      width: \"550\",\n      height: \"260\",\n      allowfullscreen: \"true\",\n      mozallowfullscreen: \"true\",\n      webkitallowfullscreen: \"true\",\n      frameborder: \"no\",\n      scrolling: \"no\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"tomatometer\",\n      style: {\n        backgroundColor: \"#abc\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Tomatometer here\"), React.createElement(\"div\", {\n      id: \"cast\",\n      style: {\n        backgroundColor: \"#cdc\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Cast details\")), React.createElement(\"div\", {\n      id: \"twitterfeed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"news\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"NEWS\"), React.createElement(\"div\", {\n      id: \"feed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \" Twitter Feed\")), React.createElement(\"div\", {\n      id: \"screen_location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"LOCATION\"), React.createElement(\"div\", {\n      id: \"maps\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" Maps\"))));\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:/Users/shrut/webapp/src/components/counter.jsx"],"names":["React","Component","logo","search","Autosuggest","axios","debounce","Counter","state","value","suggestions","cacheAPISugestions","isOpen","SUGGEST_URL","renderSuggestion","suggestion","name","onChange","event","newValue","setState","onSuggestionsFetchRequested","getSuggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","filterRes","filter","item","filterResults","moviesNames","searchValue","inputValue","trim","toLowerCase","inputLength","length","i","s","includes","year","componentWillMount","componentDidMount","get","then","res","data","render","videoid","link","inputProps","placeholder","renderInputComponent","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BO,KAD8B,GACtB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,kBAAkB,EAAE,EAHd;AAINC,MAAAA,MAAM,EAAE;AAJF,KADsB;AAAA,SAQ9BC,WAR8B,GAQhB,+BARgB;;AAAA,SAiB9BC,gBAjB8B,GAiBXC,UAAU,IAAI;AAC/B,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,UAAU,CAACC,IAAlB,CAAP;AACD,KAnB6B;;AAAA,SAqB9BC,QArB8B,GAqBnB,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZX,QAAAA,KAAK,EAAEU;AADK,OAAd;AAGD,KAzB6B;;AAAA,SAgC9BE,2BAhC8B,GAgCA,CAAC;AAAEZ,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKW,QAAL,CAAc;AACZV,QAAAA,WAAW,EAAE,KAAKY,cAAL,CAAoB,KAAKd,KAAL,CAAWG,kBAA/B,EAAmDF,KAAnD;AADD,OAAd;AAGD,KApC6B;;AAAA,SAsC9Bc,2BAtC8B,GAsCA,MAAM;AAClC,WAAKH,QAAL,CAAc;AACZV,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KA1C6B;;AAAA,SA2C9Bc,oBA3C8B,GA2CP,CAACN,KAAD,EAAQ;AAAEO,MAAAA;AAAF,KAAR,KAAgC;AACrD,UAAIC,SAAS,GAAG,KAAKlB,KAAL,CAAWE,WAA3B;AACAgB,MAAAA,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACZ,IAAL,IAAaS,eAAtC,CAAZ;;AACA,UAAIC,SAAS,IAAI,CAAjB,EAAoB;AAClB,aAAKN,QAAL,CAAc;AACZS,UAAAA,aAAa,EAAEH;AADH,SAAd;AAGD,OAJD,MAIO;AACL,aAAKN,QAAL,CAAc;AACZS,UAAAA,aAAa,EAAE,KAAKrB,KAAL,CAAWE;AADd,SAAd;AAGD;AACF,KAvD6B;;AAAA,SAwD9BY,cAxD8B,GAwDb,CAACQ,WAAD,EAAcC,WAAd,KAA8B;AAC7C,YAAMC,UAAU,GAAGD,WAAW,CAACE,IAAZ,GAAmBC,WAAnB,EAAnB;AACA,YAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AACA,UAAID,WAAW,KAAK,CAApB,EAAuB,OAAO,EAAP,CAAvB,KACK;AACH,YAAIE,CAAJ;AACA,eAAOP,WAAW,CAACH,MAAZ,CACLW,CAAC,IACCA,CAAC,CAACtB,IAAF,CAAOkB,WAAP,GAAqBK,QAArB,CAA8BP,UAA9B,KACAM,CAAC,CAACE,IAAF,CAAON,WAAP,GAAqBK,QAArB,CAA8BP,UAA9B,CAHG,CAAP;AAKD;AACF,KApE6B;AAAA;;AAU9BS,EAAAA,kBAAkB,GAAG;AACnB,SAAKpB,2BAAL,GAAmCf,QAAQ,CACzC,GADyC,EAEzC,KAAKe,2BAFoC,CAA3C;AAID;;AAWDqB,EAAAA,iBAAiB,GAAG;AAClBrC,IAAAA,KAAK,CAACsC,GAAN,CAAU,KAAK9B,WAAf,EAA4B,EAA5B,EAAgC+B,IAAhC,CAAqCC,GAAG,IAAI;AAC1C,WAAKzB,QAAL,CAAc;AAAET,QAAAA,kBAAkB,EAAEkC,GAAG,CAACC;AAA1B,OAAd;AACD,KAFD;AAGD;;AAuCDC,EAAAA,MAAM,GAAG;AACP,QAAIC,OAAO,GAAG,cAAd;AACA,QAAIC,IAAI,GAAI,mCAAkCD,OAAQ,EAAtD;AACA,UAAMvC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AACA,UAAMC,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA/B;AAEA,UAAMwC,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,2BADI;AAEjB1C,MAAAA,KAFiB;AAGjBQ,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB;;AAKA,UAAMmC,oBAAoB,GAAGF,UAAU,IACrC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,GAAG,EAAC,wDAFN;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,MAAM,EAAC,MAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,+CAAWA,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPF,CADF;;AAYA,WACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAC,YAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAC,EADN;AAEE,MAAA,GAAG,EAAEhD,IAFP;AAGE,MAAA,KAAK,EAAC,IAHR;AAIE,MAAA,MAAM,EAAC,IAJT;AAKE,MAAA,eAAe,EAAC,aALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARF,CADF,EAYE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAEQ,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKW,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKE,2BAHpC;AAIE,MAAA,kBAAkB,EAAER,UAAU,IAAIA,UAAU,CAACC,IAJ/C;AAKE,MAAA,gBAAgB,EAAE,KAAKF,gBALzB;AAME,MAAA,oBAAoB,EAAE,KAAKU,oBAN7B;AAOE,MAAA,UAAU,EAAE0B,UAPd;AAQE,MAAA,oBAAoB,EAAEE,oBARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF,EAyBE;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAEJ,IADP;AAEE,MAAA,KAAK,EAAC,KAFR;AAGE,MAAA,MAAM,EAAC,KAHT;AAIE,MAAA,eAAe,EAAC,MAJlB;AAKE,MAAA,kBAAkB,EAAC,MALrB;AAME,MAAA,qBAAqB,EAAC,MANxB;AAOE,MAAA,WAAW,EAAC,IAPd;AAQE,MAAA,SAAS,EAAC,IARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAaE;AAAK,MAAA,EAAE,EAAC,aAAR;AAAsB,MAAA,KAAK,EAAE;AAAEI,QAAAA,eAAe,EAAE;AAAnB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAbF,EAgBE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAe,MAAA,KAAK,EAAE;AAAEA,QAAAA,eAAe,EAAE;AAAnB,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhBF,CADF,EAqBE;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CArBF,EA0BE;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CA1BF,CAzBF,CADF;AA2DD;;AAvJ6B;;AA0JhC,eAAe9C,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./counter.css\";\r\nimport logo from \"./cine.png\";\r\nimport search from \"./searchicon.jpg\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport axios from \"axios\";\r\nimport { debounce } from \"throttle-debounce\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    value: \"\",\r\n    suggestions: [],\r\n    cacheAPISugestions: [],\r\n    isOpen: false\r\n  };\r\n\r\n  SUGGEST_URL = \"http://localhost:8080/suggest\";\r\n\r\n  componentWillMount() {\r\n    this.onSuggestionsFetchRequested = debounce(\r\n      500,\r\n      this.onSuggestionsFetchRequested\r\n    );\r\n  }\r\n\r\n  renderSuggestion = suggestion => {\r\n    return <span>{suggestion.name}</span>;\r\n  };\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    axios.get(this.SUGGEST_URL, {}).then(res => {\r\n      this.setState({ cacheAPISugestions: res.data });\r\n    });\r\n  }\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: this.getSuggestions(this.state.cacheAPISugestions, value)\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n  onSuggestionSelected = (event, { suggestionValue }) => {\r\n    var filterRes = this.state.suggestions;\r\n    filterRes = filterRes.filter(item => item.name == suggestionValue);\r\n    if (filterRes != 0) {\r\n      this.setState({\r\n        filterResults: filterRes\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filterResults: this.state.suggestions\r\n      });\r\n    }\r\n  };\r\n  getSuggestions = (moviesNames, searchValue) => {\r\n    const inputValue = searchValue.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    if (inputLength === 0) return [];\r\n    else {\r\n      var i;\r\n      return moviesNames.filter(\r\n        s =>\r\n          s.name.toLowerCase().includes(inputValue) ||\r\n          s.year.toLowerCase().includes(inputValue)\r\n      );\r\n    }\r\n  };\r\n  render() {\r\n    let videoid = \"vi2308751129\";\r\n    let link = `https://www.imdb.com/videoembed/${videoid}`;\r\n    const value = this.state.value;\r\n    const suggestions = this.state.suggestions;\r\n\r\n    const inputProps = {\r\n      placeholder: \" Enter movie name or year\",\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n    const renderInputComponent = inputProps => (\r\n      <div className=\"inputContainer\">\r\n        <img\r\n          className=\"icon\"\r\n          src=\"https://img.icons8.com/ios-filled/50/000000/search.png\"\r\n          width=\"20px\"\r\n          height=\"20px\"\r\n        />\r\n        <input {...inputProps} />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div id=\"page\">\r\n        <div class=\"header\">\r\n          <span class=\"logoheader\">\r\n            <img\r\n              alt=\"\"\r\n              src={logo}\r\n              width=\"50\"\r\n              height=\"50\"\r\n              backgroundColor=\"transparent\"\r\n            />\r\n            <text>CINEPHILE</text>\r\n          </span>\r\n\r\n          <Autosuggest\r\n            suggestions={suggestions}\r\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n            getSuggestionValue={suggestion => suggestion.name}\r\n            renderSuggestion={this.renderSuggestion}\r\n            onSuggestionSelected={this.onSuggestionSelected}\r\n            inputProps={inputProps}\r\n            renderInputComponent={renderInputComponent}\r\n          />\r\n        </div>\r\n        {/* header div ends here */}\r\n        <div id=\"all_details\">\r\n          <div id=\"moviereview\">\r\n            <div id=\"trailer\" style={{ backgroundColor: \"#cde\" }}>\r\n              <iframe\r\n                src={link}\r\n                width=\"550\"\r\n                height=\"260\"\r\n                allowfullscreen=\"true\"\r\n                mozallowfullscreen=\"true\"\r\n                webkitallowfullscreen=\"true\"\r\n                frameborder=\"no\"\r\n                scrolling=\"no\"\r\n              ></iframe>\r\n            </div>\r\n            <div id=\"tomatometer\" style={{ backgroundColor: \"#abc\" }}>\r\n              Tomatometer here\r\n            </div>\r\n            <div id=\"cast\" style={{ backgroundColor: \"#cdc\" }}>\r\n              Cast details\r\n            </div>\r\n          </div>\r\n          <div id=\"twitterfeed\">\r\n            <div id=\"news\">NEWS</div>\r\n            <div id=\"feed\"> Twitter Feed</div>\r\n          </div>\r\n\r\n          <div id=\"screen_location\">\r\n            <div id=\"location\">LOCATION</div>\r\n            <div id=\"maps\"> Maps</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n"]},"metadata":{},"sourceType":"module"}